// 23/04/19

using System;
using System.Diagnostics;

using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

using NovLab;


namespace SnapCapture
{
    /// <summary>
    /// 【コンフィグ設定ダイアログ】
    /// </summary>
    public partial class DlgNLSCConfig : Form
    {
        //====================================================================================================
        // フォームイベント
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【コンフィグ設定ダイアログ_コンストラクター】新しいインスタンスを初期化します。
        /// </summary>
        //--------------------------------------------------------------------------------
        public DlgNLSCConfig()
        {
            //------------------------------------------------------------
            // 自動生成された部分
            //------------------------------------------------------------
            InitializeComponent();
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【コンフィグ設定ダイアログ_Load】本ダイアログを初期化します。
        /// </summary>
        //--------------------------------------------------------------------------------
        private void FrmConfig_Load(object sender, EventArgs e)
        {
            //------------------------------------------------------------
            /// 本ダイアログを初期化する
            //------------------------------------------------------------
            //----------------------------------------
            //// 保存時イメージ形式コンボボックス
            //----------------------------------------
            CboSaveImageFormat.DataSource = ImageFormatInfo.options;                ///// データソース = イメージ形式情報の選択肢テーブル
            CboSaveImageFormat.ValueMember = nameof(ImageFormatInfo.Kind);          ///// 値として使用するプロパティー = イメージ形式種別
            CboSaveImageFormat.DisplayMember = nameof(ImageFormatInfo.DisplayText); ///// 表示名に使用するプロパティー = 表示名


            //------------------------------------------------------------
            /// コンフィグ設定情報を画面へ反映する
            //------------------------------------------------------------
            TxtBaseFileName.Text = AppConfig.BaseFileName;                      //// ベースファイル名
            CboSaveImageFormat.SelectedValue = AppConfig.SaveImageFormatKind;   //// 保存時イメージ形式種別
        }


        //====================================================================================================
        // コントロールイベント
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【OKボタン_Click】入力内容をコンフィグ設定情報へ反映し、ダイアログ処理結果 = OK で画面を閉じます。
        /// </summary>
        //--------------------------------------------------------------------------------
        private void BtnOK_Click(object sender, EventArgs e)
        {
            //------------------------------------------------------------
            /// 入力内容をコンフィグ設定情報へ反映する
            //------------------------------------------------------------
            AppConfig.BaseFileName = TxtBaseFileName.Text;
            AppConfig.SaveImageFormatKind = (ImageFormatKind)CboSaveImageFormat.SelectedValue;

            //------------------------------------------------------------
            /// ダイアログ処理結果 = OK で画面を閉じる
            //------------------------------------------------------------
            DialogResult = DialogResult.OK;
            Close();
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【キャンセルボタン_Click】ダイアログ処理結果 = キャンセル で画面を閉じます。
        /// </summary>
        //--------------------------------------------------------------------------------
        private void BtnCancel_Click(object sender, EventArgs e)
        {
            //------------------------------------------------------------
            /// ダイアログ処理結果 = キャンセル で画面を閉じる
            //------------------------------------------------------------
            DialogResult = DialogResult.Cancel;
            Close();
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【ベースファイル名テキストボックス_Validating】入力内容を正規化し、検証します。
        /// </summary>
        //--------------------------------------------------------------------------------
        private void TxtBaseFileName_Validating(object sender, CancelEventArgs e)
        {
            //------------------------------------------------------------
            /// ベースファイル名の入力内容を正規化する
            //------------------------------------------------------------
            var baseFileName =
                BaseFileNameString.Normalize(TxtBaseFileName.Text);     //// ベースファイル名の入力内容を正規化して取得する
            if (baseFileName != TxtBaseFileName.Text)
            {                                                           //// 正規化によって内容が変化した場合
                TxtBaseFileName.Text = baseFileName;                    /////  テキストボックスへ反映する
            }


            //------------------------------------------------------------
            /// ベースファイル名の入力内容を検証する
            //------------------------------------------------------------
            var errorMessage =
                BaseFileNameString.Validate(TxtBaseFileName.Text);      //// 入力内容を検証してエラーメッセージを取得する

            if (string.IsNullOrEmpty(errorMessage))
            {                                                           //// エラーメッセージが null または空文字列の場合(エラーなしの場合)
                errorProvider1.SetError(TxtBaseFileName, "");           /////  エラープロバイダーのエラーメッセージを消去する
            }
            else
            {                                                           //// エラーメッセージが設定されている場合(エラーありの場合)
                e.Cancel = true;                                        /////  イベントをキャンセルする
                TxtBaseFileName.SelectAll();                            /////  テキストボックス全体を選択状態にする
                errorProvider1.SetError(TxtBaseFileName, errorMessage); /////  エラープロバイダーにエラーメッセージを設定する
            }
        }
    }

}
