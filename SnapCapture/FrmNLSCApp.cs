// 23/04/18

using System;
using System.Diagnostics;
using System.IO;
using System.Drawing;

using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;

using NovLab.DebugStation;


namespace SnapCapture
{
    //====================================================================================================
    /// <summary>
    /// 【SnapCapture・メイン画面】本アプリケーションのメイン画面です。
    /// </summary>
    //====================================================================================================
    public partial class FrmNLSCApp : Form
    {
        //====================================================================================================
        // 内部フィールド
        //====================================================================================================
        /// <summary>
        /// 【クリップボードリスナー登録済みフラグ】
        /// </summary>
        protected bool m_clipboardListenerRegistered;


        /// <summary>
        /// 【スナップ連番】保存ファイル名に付加する連番。
        /// </summary>
        protected int m_snapSeqNo = 1;


        //====================================================================================================
        // フォームイベント
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【メインフォーム_コンストラクター】新しいインスタンスを初期化します。
        /// </summary>
        //--------------------------------------------------------------------------------
        public FrmNLSCApp()
        {
            //------------------------------------------------------------
            // 自動生成された部分
            //------------------------------------------------------------
            InitializeComponent();
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【メインフォーム_Load】アプリケーションと本フォームを初期化します。
        /// </summary>
        //--------------------------------------------------------------------------------
        private void FrmNLSCApp_Load(object sender, EventArgs e)
        {
            //------------------------------------------------------------
            /// アプリケーションを初期化する
            //------------------------------------------------------------
            Application.ApplicationExit +=                              //// アプリケーション_ApplicationExit ハンドラを設定する
                new EventHandler(this.OnApplicationExit);

#if DEBUG   // DEBUGビルドのみ有効
            DebugStationTraceListener.RegisterListener();
            NLDebug.SendProcessStart();
#endif

            //------------------------------------------------------------
            /// クリップボードリスナーに追加する
            //------------------------------------------------------------
            Trace.WriteLine("AddClipboardFormatListener");
            AppWin32API.AddClipboardFormatListener(Handle);             //// クリップボードリスナーにウィンドウを登録する
            m_clipboardListenerRegistered = true;                       //// クリップボードリスナー登録済みフラグ = true にセットする


            //------------------------------------------------------------
            /// 本フォームを初期化する
            //------------------------------------------------------------
            m_snapSeqNo = 1;                                            //// スナップ連番 = 1 に初期化する
            m_snapSeqNo = M_GetAvailableSeqNo(m_snapSeqNo);             //// スナップ連番 = 利用可能なスナップ連番 に更新する
            M_RefreshForm();                                            //// 表示内容更新処理を行う
        }


        // ・「デバッグの停止」で強制終了した場合は、呼び出されないため後始末ができないが、
        //   クリップボードビューアチェイン(SetClipboardViewer, ChangeClipboardChain)を
        //   用いた監視方法とは違って悪影響は出なさそう。
        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【メインフォーム_FormClosing】本フォームの終了処理を行います。
        /// </summary>
        //--------------------------------------------------------------------------------
        private void FrmNLSCApp_FormClosing(object sender, FormClosingEventArgs e)
        {
            //------------------------------------------------------------
            /// クリップボードリスナーから削除する
            //------------------------------------------------------------
            if (m_clipboardListenerRegistered == true)
            {                                                           //// クリップボードリスナーに登録済みの場合
                Trace.WriteLine("RemoveClipboardFormatListener");
                AppWin32API.RemoveClipboardFormatListener(Handle);      /////  クリップボードリスナーからウィンドウを削除する
                m_clipboardListenerRegistered = false;                  /////  クリップボードリスナー登録済みフラグ = false にリセットする
            }
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【アプリケーション_ApplicationExit】
        /// アプリケーションが終了するときに呼び出されます。<br></br>
        /// ・アプリケーションの終了処理を行います。<br></br>
        /// </summary>
        //--------------------------------------------------------------------------------
        private void OnApplicationExit(object sender, EventArgs e)
        {
            //------------------------------------------------------------
            /// アプリケーションの終了処理を行う
            //------------------------------------------------------------
            try
            {                                                           //// try開始
#if DEBUG   // DEBUGビルドのみ有効
                NLDebug.SendProcessExit();
#endif
            }
            catch { }                                                   //// catch：すべての例外を無視する
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【ウィンドウプロシージャ】
        /// ウィンドウメッセージを処理します。
        /// </summary>
        /// <param name="m">[In ]：ウィンドウメッセージ</param>
        //--------------------------------------------------------------------------------
        protected override void WndProc(ref Message m)
        {
            //------------------------------------------------------------
            /// クリップボードに画像がコピーされた場合は保存する
            //------------------------------------------------------------
            if (m.Msg == AppWin32API.WM_CLIPBOARDUPDATE)
            {                                                           //// クリップボードの内容が更新された場合
                if (Clipboard.ContainsImage() == false)
                {                                                       /////  クリップボードの内容がイメージ形式でない場合
                    Trace.WriteLine("WM_CLIPBOARDUPDATE：イメージ形式でないので無視");
                    m.Result = (IntPtr)0;                               //////   ウィンドウメッセージの戻り値 = 0(正常終了)
                    return;                                             //////   関数終了
                }

                Trace.WriteLine("WM_CLIPBOARDUPDATE：イメージを保存");
                M_SaveImage(Clipboard.GetImage());                      /////  クリップボードからイメージデータを取得して保存する
                M_PlayShutterSound();                                   /////  シャッター音再生処理を行う
                m.Result = (IntPtr)0;                                   /////  ウィンドウメッセージの戻り値 = 0(正常終了)
                return;                                                 /////  関数終了
            }


            //------------------------------------------------------------
            /// 上記で処理しなかったウィンドウメッセージは基本クラスで処理する
            //------------------------------------------------------------
            base.WndProc(ref m);
        }


        //====================================================================================================
        // コントロールイベント
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【コンフィグ設定ボタン_Click】コンフィグ設定ダイアログを開きます。
        /// </summary>
        //--------------------------------------------------------------------------------
        private void BtnConfig_Click(object sender, EventArgs e)
        {
            //------------------------------------------------------------
            /// コンフィグ設定ダイアログを開く
            //------------------------------------------------------------
            using (DlgNLSCConfig dlgConfig = new DlgNLSCConfig())
            {                                                           //// using：コンフィグ設定ダイアログを生成する
                var result = dlgConfig.ShowDialog();                    /////  コンフィグ設定ダイアログをダイアログ表示する
                if (result == DialogResult.OK)
                {                                                       /////  ダイアログ処理結果 = OK の場合、設定内容を反映する
                    m_snapSeqNo = 1;                                    //////   スナップ連番 = 1 にリセットする
                    m_snapSeqNo = M_GetAvailableSeqNo(m_snapSeqNo);     //////   スナップ連番 = 利用可能なスナップ連番 に更新する
                    M_RefreshForm();                                    //////   表示内容更新処理を行う

                    Debug.Print("選択結果：" + AppConfig.SaveImageFormatKind);
                }

                dlgConfig.Dispose();                                    /////  コンフィグ設定ダイアログを廃棄する
            }
        }


        //====================================================================================================
        // 内部メソッド
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【シャッター音再生】コンフィグ設定に従ってシャッター音を鳴らします。
        /// </summary>
        //--------------------------------------------------------------------------------
        protected void M_PlayShutterSound()
        {
            System.Media.SystemSounds.Beep.Play();
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【利用可能スナップ連番取得】既存のファイル名やディレクトリ名と重複しない、次に利用可能なスナップ連番を取得します。
        /// </summary>
        /// <param name="startSeqNo">[In ]：検索開始連番</param>
        /// <returns>
        /// 利用可能なスナップ連番(-1 = 利用可能な連番がない)
        /// </returns>
        //--------------------------------------------------------------------------------
        protected int M_GetAvailableSeqNo(int startSeqNo)
        {
            //------------------------------------------------------------
            /// 次に利用可能なスナップ連番を取得する
            //------------------------------------------------------------
            for (var curtSeqNo = startSeqNo; curtSeqNo <= int.MaxValue; curtSeqNo++)
            {                                                               //// 検索開始連番～int.MaxValue を繰り返す
                var savePathFile = AppConfig.MakeSavePathFile(curtSeqNo);   /////  保存フルパスファイル名を作成する

                if (File.Exists(savePathFile) == false &&
                    Directory.Exists(savePathFile) == false)
                {                                                           /////  既存のファイルやディレクトリと重複しない場合
                    return curtSeqNo;                                       //////   戻り値 = 連番 で関数終了
                }
            }

            return -1;                                                  //// 利用可能な連番が見つからなかった場合、戻り値 = -1 で関数終了
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【表示内容更新】本フォームの表示内容を更新します。
        /// </summary>
        //--------------------------------------------------------------------------------
        protected void M_RefreshForm()
        {
            //------------------------------------------------------------
            /// 本フォームの表示内容を更新する
            //------------------------------------------------------------
            Text = m_snapSeqNo + "-" + Application.ProductName;             //// スナップ連番＋製品名をフォームキャプションに設定する
            LblNextFileName.Text = AppConfig.MakeSaveFileName(m_snapSeqNo); //// 次のファイル名をラベルに設定する
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【画像を保存】画像をファイルに保存します。
        /// </summary>
        /// <param name="image">[In ]：イメージデータ</param>
        //--------------------------------------------------------------------------------
        protected void M_SaveImage(Image image)
        {
            //[-]：キャプチャしたときにウィンドウとタスクバーを１度点滅させたいが、Visual C# 2019 + Windows10 だと期待した通りに動作しない
            //ZZZFlashWindowTest.DoTestEx(Handle);


            //------------------------------------------------------------
            /// 画像を保存する
            //------------------------------------------------------------
            m_snapSeqNo = M_GetAvailableSeqNo(m_snapSeqNo);             //// 利用可能な連番を取得する
            var savePathFile = AppConfig.MakeSavePathFile(m_snapSeqNo); //// 保存フルパスファイル名を作成する
            image.Save(savePathFile, AppConfig.SaveImageFormat);        //// イメージデータを保存する


            //------------------------------------------------------------
            /// 次の準備をする
            //------------------------------------------------------------
            m_snapSeqNo++;                                              //// 連番に１加算する
            m_snapSeqNo = M_GetAvailableSeqNo(m_snapSeqNo);             //// 連番 = 利用可能な連番 に更新する
            M_RefreshForm();                                            //// 表示内容更新処理を行う
        }

    }

}
